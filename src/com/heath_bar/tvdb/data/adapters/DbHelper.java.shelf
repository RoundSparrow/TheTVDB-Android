/*
│──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────│
│                                                  TERMS OF USE: MIT License                                                   │
│                                                  Copyright © 2012 Heath Paddock                                              │
├──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation    │ 
│files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,    │
│modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software│
│is furnished to do so, subject to the following conditions:                                                                   │
│                                                                                                                              │
│The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.│
│                                                                                                                              │
│THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE          │
│WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR         │
│COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,   │
│ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                         │
├──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
 */
package com.heath_bar.tvdb.data.adapters;


import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import com.heath_bar.tvdb.AppSettings;

public class DbHelper extends SQLiteOpenHelper {

    public DbHelper(Context context) {
        super(context, DATABASE_NAME, null, AppSettings.DATABASE_VERSION);
    }

	private static final String DATABASE_NAME = "tvdb_data";
	public static final String CONFIG_TABLE = "config";
	public static final String KEY_CONFIG_NAME = "name";
	public static final String KEY_CONFIG_VALUE = "value";
	
	
	
	// SQL to create db objects
	private static final String DATABASE_CREATE_CONFIG_TABLE = 
			"create table " + CONFIG_TABLE + " ("
			+ KEY_CONFIG_NAME + " text unique not null, "
			+ KEY_CONFIG_VALUE + " text not null);";
	
	private static final String DATABASE_POPULATE_CONFIG_TABLE = 
			"insert into " + CONFIG_TABLE + " values ('FavoritesMode', '0');";

	private static final String DATABASE_CREATE_FAVORITES_VIEW = 
			"create view " + SeriesDbAdapter.FAVORITES_VIEW + " AS select "
			+ SeriesDbAdapter.KEY_ID + ", "
			+ SeriesDbAdapter.KEY_TITLE + ", "
			+ "CASE WHEN " + SeriesDbAdapter.KEY_LAST_AIRED + " = 0 THEN 'Unknown' ELSE date(datetime("+SeriesDbAdapter.KEY_LAST_AIRED+", 'unixepoch')) END AS " + SeriesDbAdapter.KEY_LAST_AIRED + ", "
			+ "CASE WHEN " + SeriesDbAdapter.KEY_NEXT_AIRED + " = 0 THEN 'Unknown' ELSE date(datetime("+SeriesDbAdapter.KEY_NEXT_AIRED+", 'unixepoch')) END AS " + SeriesDbAdapter.KEY_NEXT_AIRED + " "
			+ "from " + SeriesDbAdapter.FAVORITES_TABLE + " "
			+ "where " + SeriesDbAdapter.KEY_MODE + " = (select " + KEY_CONFIG_VALUE + " from " + CONFIG_TABLE + " where " + KEY_CONFIG_NAME + " = 'FavoritesMode');";
	
	
	
	
	
	
	// Build the db for the first time
	@Override
	public void onCreate(SQLiteDatabase db) {
		String DATABASE_CREATE =
                "create table " + SeriesDbAdapter.FAVORITES_TABLE + " ("
            	+ SeriesDbAdapter.KEY_ID + " integer, "
                + SeriesDbAdapter.KEY_TITLE + " text not null, "
                + SeriesDbAdapter.KEY_LAST_AIRED + " integer, "
                + SeriesDbAdapter.KEY_NEXT_AIRED + " integer, "
				+ SeriesDbAdapter.KEY_MODE + " text default 'local' not null "
				+ "primary key (" + SeriesDbAdapter.KEY_ID + ", " + SeriesDbAdapter.KEY_MODE +"));";
        db.execSQL(DATABASE_CREATE);
        
        db.execSQL(DATABASE_CREATE_CONFIG_TABLE);
        db.execSQL(DATABASE_POPULATE_CONFIG_TABLE);
        db.execSQL(DATABASE_CREATE_FAVORITES_VIEW);

	}

	
	// Upgrade the database
	@Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
		if (newVersion == 2){
			
			final String newFavoritesTableName = "new_favorites";
			
			// Step 1: Create new favorites table
			String DATABASE_ALTER =
	                "create table " + newFavoritesTableName + " ("
	            	+ SeriesDbAdapter.KEY_ID + " integer, "
	                + SeriesDbAdapter.KEY_TITLE + " text not null, "
	                + SeriesDbAdapter.KEY_LAST_AIRED + " integer, "
	                + SeriesDbAdapter.KEY_NEXT_AIRED + " integer, "
					+ SeriesDbAdapter.KEY_MODE + " text default 'local' not null "
					+ "primary key (" + SeriesDbAdapter.KEY_ID + ", " + SeriesDbAdapter.KEY_MODE +"));";
            db.execSQL(DATABASE_ALTER);
			
			// Step 2: Populate new favorites table
	        DATABASE_ALTER = "insert into " + newFavoritesTableName + " select "
	        				+ SeriesDbAdapter.KEY_ID + ", "
	        				+ SeriesDbAdapter.KEY_TITLE + ", "
	        				+ SeriesDbAdapter.KEY_LAST_AIRED + ", "
	        				+ SeriesDbAdapter.KEY_NEXT_AIRED + ", "
	        				+ "'LOCAL' from " + SeriesDbAdapter.FAVORITES_TABLE;
	        db.execSQL(DATABASE_ALTER);
	        
	        // Step 3: Drop old table
	        DATABASE_ALTER = "drop table " + SeriesDbAdapter.FAVORITES_TABLE;
	        db.execSQL(DATABASE_ALTER);
			
	        // Step 4: rename new table
	        DATABASE_ALTER = "alter table " + newFavoritesTableName + " rename to " + SeriesDbAdapter.FAVORITES_TABLE;
	        db.execSQL(DATABASE_ALTER);
	        

	        db.execSQL(DATABASE_CREATE_CONFIG_TABLE);
			db.execSQL(DATABASE_POPULATE_CONFIG_TABLE);
			db.execSQL(DATABASE_CREATE_FAVORITES_VIEW);
			
		}

	}

}
